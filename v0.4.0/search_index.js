var documenterSearchIndex = {"docs":
[{"location":"library/#Library-1","page":"Library","title":"Library","text":"","category":"section"},{"location":"library/#","page":"Library","title":"Library","text":"Documentation for SpineOpt.jl.","category":"page"},{"location":"library/#Contents-1","page":"Library","title":"Contents","text":"","category":"section"},{"location":"library/#","page":"Library","title":"Library","text":"Pages = [\"library.md\"]\r\nDepth = 3","category":"page"},{"location":"library/#Index-1","page":"Library","title":"Index","text":"","category":"section"},{"location":"library/#","page":"Library","title":"Library","text":"","category":"page"},{"location":"library/#Public-interface-1","page":"Library","title":"Public interface","text":"","category":"section"},{"location":"library/#","page":"Library","title":"Library","text":"run_spineopt(::String, ::String)\r\nrun_spineopt(::String)","category":"page"},{"location":"library/#SpineOpt.run_spineopt-Tuple{String,String}","page":"Library","title":"SpineOpt.run_spineopt","text":"run_spineopt(url_in, url_out; <keyword arguments>)\n\nRun the SpineOpt from url_in and write report to url_out. At least url_in must point to valid Spine database. A new Spine database is created at url_out if it doesn't exist.\n\nKeyword arguments\n\nwith_optimizer=with_optimizer(Cbc.Optimizer, logLevel=0) is the optimizer factory for building the JuMP model.\n\ncleanup=true tells run_spineopt whether or not convenience functors should be set to nothing after completion.\n\nadd_constraints=m -> nothing is called with the Model object in the first optimization window, and allows adding user contraints.\n\nupdate_constraints=m -> nothing is called in windows 2 to the last, and allows updating contraints added by add_constraints.\n\nlog_level=3 is the log level.\n\n\n\n\n\n","category":"method"},{"location":"library/#SpineOpt.run_spineopt-Tuple{String}","page":"Library","title":"SpineOpt.run_spineopt","text":"run_spineopt(url_in, url_out; <keyword arguments>)\n\nRun the SpineOpt from url_in and write report to url_out. At least url_in must point to valid Spine database. A new Spine database is created at url_out if it doesn't exist.\n\nKeyword arguments\n\nwith_optimizer=with_optimizer(Cbc.Optimizer, logLevel=0) is the optimizer factory for building the JuMP model.\n\ncleanup=true tells run_spineopt whether or not convenience functors should be set to nothing after completion.\n\nadd_constraints=m -> nothing is called with the Model object in the first optimization window, and allows adding user contraints.\n\nupdate_constraints=m -> nothing is called in windows 2 to the last, and allows updating contraints added by add_constraints.\n\nlog_level=3 is the log level.\n\n\n\n\n\n","category":"method"},{"location":"library/#Internals-1","page":"Library","title":"Internals","text":"","category":"section"},{"location":"library/#Variables-1","page":"Library","title":"Variables","text":"","category":"section"},{"location":"library/#","page":"Library","title":"Library","text":"variable_flow\r\nvariable_connection_flow\r\nvariable_units_on\r\nflow_indices\r\nvar_flow_indices\r\nfix_unit_flow_indices\r\nconnection_flow_indices\r\nvar_connection_flow_indices\r\nfix_connection_flow_indices\r\nunits_on_indices\r\nvar_units_on_indices\r\nfix_units_on_indices","category":"page"},{"location":"library/#SpineOpt.connection_flow_indices","page":"Library","title":"SpineOpt.connection_flow_indices","text":"connection_flow_indices(\n    connection=anything,\n    node=anything,\n    direction=anything,\n    t=anything\n)\n\nA list of NamedTuples corresponding to indices of the connection_flow variable. The keyword arguments act as filters for each dimension.\n\n\n\n\n\n","category":"function"},{"location":"library/#SpineOpt.units_on_indices","page":"Library","title":"SpineOpt.units_on_indices","text":"units_on_indices(unit=anything, stochastic_scenario=anything, t=anything)\n\nA list of NamedTuples corresponding to indices of the units_on variable where the keyword arguments act as filters for each dimension.\n\n\n\n\n\n","category":"function"},{"location":"library/#Constraints-1","page":"Library","title":"Constraints","text":"","category":"section"},{"location":"library/#","page":"Library","title":"Library","text":"TODO","category":"page"},{"location":"library/#Objectives-1","page":"Library","title":"Objectives","text":"","category":"section"},{"location":"library/#","page":"Library","title":"Library","text":"TODO","category":"page"},{"location":"#SpineOpt.jl-1","page":"Home","title":"SpineOpt.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"This package provides the ability to generate and run the Spine energy system integration model (in short, Spine Opt) from databases having the appropriate structure. SpineOpt uses SpineInterface to gain access to the contents of the database, and JuMP to build and solve an optimisation model based on those contents.","category":"page"},{"location":"#Compatibility-1","page":"Home","title":"Compatibility","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"This package requires Julia 1.2 or later.","category":"page"},{"location":"#Installation-1","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"julia> using Pkg\r\n\r\njulia> pkg\"registry add https://github.com/Spine-project/SpineJuliaRegistry\"\r\n\r\njulia> pkg\"add SpineOpt\"\r\n","category":"page"},{"location":"#Quick-start-guide-1","page":"Home","title":"Quick start guide","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Once SpineOpt is installed, to use it in your programs you just need to say:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"julia> using SpineOpt","category":"page"},{"location":"#","page":"Home","title":"Home","text":"To generate and run Spine Opt for a database, say:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"julia> run_spineopt(\"...url of a Spine Opt database...\")","category":"page"},{"location":"#","page":"Home","title":"Home","text":"In what follows, we demonstrate how to setup a database for a simple Spine Opt using only SpineOpt.jl. However, please note that the recomended way of creating, populating, and maintaining Spine databases is through  Spine Toolbox.","category":"page"},{"location":"#Creating-a-Spine-Opt-database-1","page":"Home","title":"Creating a Spine Opt database","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Create a new Spine database by running:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"julia> url = \"sqlite:///example.db\";\r\n\r\njulia> import SpineInterface: db_api  # brings `db_api` into scope\r\n\r\njulia> db_api.create_new_spine_database(url);","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The above will create a SQLite file called example.db in the present working directory, with the Spine database schema in it.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"To make it a Spine Opt database, run:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"julia> template = Dict(Symbol(key) => value for (key, value) in SpineOpt.template);\r\n\r\njulia> db_api.import_data_to_url(url_in; template...)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"This will insert a predefined set of object classes, relationship classes, and parameter definitions required by Spine Opt to run, as well as sensitive default values for those parameters.","category":"page"},{"location":"#Defining-the-model-structure-1","page":"Home","title":"Defining the model structure","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"The first step in defining a Spine Opt is to create the objects and relationships that specify the model structure.","category":"page"},{"location":"#Defining-the-model-object-1","page":"Home","title":"Defining the model object","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"The model object in Spine Opt is an abstraction that represents the model itself. Every Spine Opt database needs to have exactly one model object. Let's create one for our database by running:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"julia> db_api.import_data_to_url(url; objects=[[\"model\", \"quick_start\"]])\r\n","category":"page"},{"location":"#Defining-the-spatial-structure-1","page":"Home","title":"Defining the spatial structure","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"To specify the spatial structure for Spine Opt, you need to define node, unit, and connection objects, together with the relationships that define their interactions. You can think of the node as sort-of an 'aggregator', whereas the unit and the connection are sort-of 'devices' installed in between nodes.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Let's add some units and nodes to our database to start building our model. Run:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"julia> objects = [\r\n\t[\"unit\", \"gas_import\"],\r\n\t[\"unit\", \"power_plant\"],\r\n\t[\"node\", \"gas_node\"],\r\n\t[\"node\", \"electricity_node\"],\r\n];\r\n\r\njulia> db_api.import_data_to_url(url; objects=objects)\r\n","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The above will add to the database two units named gas_import and power_plant, and two nodes named gas_node and electricity_node.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"To specify how these units and nodes may interact with each other, let's define some unit__from_node and unit__to_node relationships:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"julia> relationships = [\r\n\t[\"unit__to_node\", [\"gas_import\", \"gas_node\"]],\r\n\t[\"unit__from_node\", [\"power_plant\", \"gas_node\"]],\r\n\t[\"unit__to_node\", [\"power_plant\", \"electricity_node\"]],\r\n];\r\n\r\njulia> db_api.import_data_to_url(url; relationships=relationships)\r\n","category":"page"},{"location":"#","page":"Home","title":"Home","text":"In practical terms, the above means that there are energy flows going from gas_import into gas_node, as well as from gas_node into power_plant, and from power_plant into electricity_node.","category":"page"},{"location":"#Defining-the-temporal-structure-1","page":"Home","title":"Defining the temporal structure","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"To specify the temporal structure for Spine Opt, you need to define temporal_block objects. Think of a temporal_block as a distinctive way of 'slicing' time across the model horizon.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"To link the temporal structure to the spatial structure,  you need to specify node__temporal_block relationships, establishing which temporal__block applies to each node.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"To keep things simple at this point, let's just define one temporal_block for our model and apply it to all nodes:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"julia> objects = [[\"temporal_block\", \"hourly_temporal_block\"]];\r\n\r\njulia> relationships = [\r\n\t[\"node__temporal_block\", [\"gas_node\", \"hourly_temporal_block\"]],\r\n\t[\"node__temporal_block\", [\"electricity_node\", \"hourly_temporal_block\"]]\r\n];\r\n\r\njulia> db_api.import_data_to_url(url; objects=objects, relationships=relationships)\r\n","category":"page"},{"location":"#","page":"Home","title":"Home","text":"In practical terms, the above means that there energy flows over gas_node and electricity_node for each 'time-slice' comprised in hourly_temporal_block.","category":"page"},{"location":"#Defining-the-stochastic-structure-1","page":"Home","title":"Defining the stochastic structure","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"To specify the stochastic structure for Spine Opt,  you need to define stochastic_scenario and stochastic_structure objects, together with stochastic_structure__stochastic_scenario relationships (and optionally, parent_stochastic_scenario__child_stochastic_scenario relationships).","category":"page"},{"location":"#","page":"Home","title":"Home","text":"To link the stochastic structure to the spatial structure, you need to define node__stochastic_structure relationships, establishing which stochastic_structure applies to each node.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"To keep things simple at this point, let's just define one stochastic_structure for our model with one stochastic_scenario, and apply it to all nodes:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"julia> objects = [\r\n\t[\"stochastic_structure\", \"deterministic\"],\r\n\t[\"stochastic_scenario\", \"base_case\"],\r\n];\r\n\r\njulia> relationships = [\r\n\t[\"stochastic_structure__stochastic_scenario\", [\"deterministic\", \"base_case\"]],\r\n\t[\"node__stochastic_structure\", [\"electricity_node\", \"deterministic\"]]\r\n\t[\"node__stochastic_structure\", [\"gas_node\", \"deterministic\"]]\r\n];\r\n\r\njulia> db_api.import_data_to_url(url; objects=objects, relationships=relationships)\r\n","category":"page"},{"location":"#Specifying-the-model-behavior-1","page":"Home","title":"Specifying the model behavior","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"The second step in defining a Spine Opt is to specify the object and parameter values that dictate the model behavior.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"TO BE CONTINUED...","category":"page"},{"location":"#Library-outline-1","page":"Home","title":"Library outline","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Pages = [\"library.md\"]\r\nDepth = 3","category":"page"}]
}
